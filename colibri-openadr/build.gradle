plugins {
    id "com.intershop.gradle.jaxb" version "1.0.0"
}

description = 'openADR connector bundle for Colibri project'

group 'at.ac.tuwien.auto.colibri'
version '1.0-SNAPSHOT'

apply plugin: 'idea'

apply plugin: 'java'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.atmosphere', name: 'atmosphere-runtime', version: '2.4.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.5.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.5'
    compile group: 'org.atmosphere', name: 'wasync', version: '2.1.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'


    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile "org.igniterealtime.smack:smack-java7:4.1.0"
    // Optional for XMPPTCPConnection
    compile "org.igniterealtime.smack:smack-tcp:4.1.0"
    // Optional for openADR.XMPP-IM (RFC 6121) support (Roster, Threaded Chats, â€¦)
    compile "org.igniterealtime.smack:smack-im:4.1.0"
    // Optional for openADR.XMPP extensions support
    compile "org.igniterealtime.smack:smack-extensions:4.1.0"
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

jaxb {
    // generate java code from schema
    javaGen {
        //generates a 'project' schema file from existing java code
        adr2a {
            outputDir = file('generated/jaxb/java/')
            schemas = fileTree(dir: 'src/main/resources/schema/2.0a', include: '*.xsd')
            binding = file('src/main/resources/binding/oadr20a.xjb.xml')
            catalog = file('src/main/resources/catalog.xml')
            packageName = 'com.enernoc.open.oadr2.model'
            strictValidation = false
            extension = true
        }
        adr2b {
            outputDir = file('generated/jaxb/java/')
            schemas = fileTree(dir: 'src/main/resources/schema/2.0b', include: '*.xsd')
            binding = file('src/main/resources/binding/oadr20b.xjb.xml')
            catalog = file('src/main/resources/catalog.xml')
            strictValidation = false
            extension = true
            arg('-XautoNameResolution')
        }

    }
}

compileJava {
    // This only works when forking and passing 'javac' as an executable
    options.compilerArgs << '-XDignore.symbol.file'    
    options.fork = true
    options.forkOptions.executable = 'javac'
}
